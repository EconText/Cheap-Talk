"""
This script outputs a CSV displaying topic proportions per sector
(for each sector, for each topic, what proportion of the tweets from companies in that sector
have that topic as their most probable topic?).
Computes topic proportions using the document topic assignments in docs_top_topic.npy,
generated by a biterm topic model trained on the S&P 500 tweets located in the DATA_FOLDER.
Each document is a single tweet.

To run script:
ipython
run sector_topic_poportions.py [DATA_FOLDER] [NUM_TOPICS] [CREATE_MAP]
where DATA_FOLDER is a string representing the path to the folder containing tweet data,
NUM_TOPICS is a string representing the number of topics in the model to analyze,
and CREATE_MAP is either "true", "yes", or "y" if we want to recreate the tweet id to doc num map, or anything else otherwise 

e.g. run sector_topic_proportions.py "../data/tweets/ten_years_en" 50 false
"""

import sys
import os
import numpy as np
import pandas as pd
import pickle

if __name__ == "__main__":
    # READ COMMAND LINE ARGUMENTS
    DATA_FOLDER = sys.argv[1]
    NUM_TOPICS = int(sys.argv[2])
    # Whether or not to create a new tweet_id_to_doc_num_map. We should only do this on initial run of this script.
    CREATE_MAP = sys.argv[3].lower() in ["true", "y", "yes"] 
    MODEL_FOLDER = f"{NUM_TOPICS}_topics_model"
    
    # Create a tweet_id to doc_num map
    # We should only run this once and then load it whenever else we need it.
    if CREATE_MAP:
        tweet_id_to_doc_num_map = {}
        doc_num = 0
        for comp_csv in os.listdir(DATA_FOLDER):
            df = pd.read_csv(f"{DATA_FOLDER}/{comp_csv}", lineterminator='\n')

            for tweet_id in df['tweet_id']:
                tweet_id_to_doc_num_map[tweet_id] = doc_num
                doc_num += 1
        
        with open(f"{MODEL_FOLDER}/tweet_id_to_doc_num_map.pkl", "wb") as f:
            pickle.dump(tweet_id_to_doc_num_map, f, protocol=pickle.HIGHEST_PROTOCOL)
    
    # load the map of tweet_id to doc_num
    with open(f"{MODEL_FOLDER}/tweet_id_to_doc_num_map.pkl", "rb") as f:
        tweet_id_to_doc_num_map = pickle.load(f)
    
    
    # Load the map of company to sector
    with open("../company_sector_map.pkl", "rb") as f:
        company_sector_map = pickle.load(f) 
    

    # Get numpy array of the most probable topic for each document
    # docs_top_topic will be a 1D numpy array, where the element at index i
    # is the topic number of the most probable topic for document i.
    docs_top_topic = np.load(f"{MODEL_FOLDER}/docs_top_topic.npy")

    # Load company to tweet ID to document number map
    # comp_to_tweet_id_to_doc_num_map dictionary maps company CSV filename to
    # inner dictionary mapping tweet ID to document number.
    with open(f"{MODEL_FOLDER}/comp_to_tweet_id_to_doc_num_map.pkl", "rb") as file:
        comp_to_tweet_id_to_doc_num_map = pickle.load(file)
        
        
    # From this, we create a map of sector to tweet id to doc_num
    sector_to_tweet_id_to_doc_num_map = {}
    for company_csv in comp_to_tweet_id_to_doc_num_map:
        tweet_ids_to_doc_num = comp_to_tweet_id_to_doc_num_map[company_csv]
        company_handle = company_csv.split(".")[0][:-7] # remove "_tweets"
        # print(company_handle)
        
        # TODO(nile): Update the company sector map with the proper data, then remove this
        if company_handle not in company_sector_map:
            continue
        
        sector = company_sector_map[company_handle]
        
        if sector not in sector_to_tweet_id_to_doc_num_map:
            sector_to_tweet_id_to_doc_num_map[sector] = {}
            
        for tweet_id in tweet_ids_to_doc_num:
            doc_num = tweet_ids_to_doc_num[tweet_id]
            sector_to_tweet_id_to_doc_num_map[sector][tweet_id] = doc_num
    
    with open(f"{MODEL_FOLDER}/sector_to_tweet_id_to_doc_num_map.pkl", "wb") as f:
        pickle.dump(sector_to_tweet_id_to_doc_num_map, f)
            
    
    # Create a map of sector -> topic -> tweet count
    sector_to_topic_to_count_map = {}
    for sector in sector_to_tweet_id_to_doc_num_map:
        sector_tweet_ids_to_doc_num = sector_to_tweet_id_to_doc_num_map[sector]
        sector_to_topic_to_count_map[sector] = {}
        
        # for each tweet id, get the topic
        for tweet_id in sector_tweet_ids_to_doc_num:
            doc_num = tweet_id_to_doc_num_map[tweet_id]
            topic = docs_top_topic[doc_num]
            
            if topic not in sector_to_topic_to_count_map[sector]:
                sector_to_topic_to_count_map[sector][topic] = 1
            else:
                sector_to_topic_to_count_map[sector][topic] += 1
                
    with open(f"{MODEL_FOLDER}/sector_to_topic_to_count_map.pkl", "wb") as f:
        pickle.dump(sector_to_topic_to_count_map, f)
    
    
    # Create a CSV of sector topic proportions with sector name on one axis and topic numbers on the other axis
    # Each cell will be a proportion (from 0 to 1),
    # representing the proportion of tweets from that sector that were assigned that topic.
    sector_csv_names_index = []        # The row labels for the DataFrame, which will be the company CSV filenames.
    sector_topic_proportions = []   # A list of lists, where each inner list corresponds to the topic proportions for one company, ordered from topic 0 to topic NUM_TOPICS-1.

    for sector in sector_to_topic_to_count_map:
        sector_csv_names_index.append(sector)
        
        curr_sector_total_tweet_count = sum(sector_to_topic_to_count_map[sector].values())
        curr_sector_topic_proportions = [0]*NUM_TOPICS
        
        for topic in sector_to_topic_to_count_map[sector]:
            topic_proportion = sector_to_topic_to_count_map[sector][topic] / curr_sector_total_tweet_count
            curr_sector_topic_proportions[topic] = topic_proportion
        
        sector_topic_proportions.append(curr_sector_topic_proportions)
    
    # Create Pandas DataFrame from sector_topic_proportions list of lists,
    # providing topic numbers as the column labels.
    proportion_df = pd.DataFrame(sector_topic_proportions, columns=list(range(NUM_TOPICS)))

    # Add row labels for sectors.
    proportion_df.set_index([sector_csv_names_index], inplace=True)
    
    # Save sector topic proportions as CSV.
    proportion_df.to_csv(f"{MODEL_FOLDER}/sector_topic_proportions.csv")
        
